# Copyright (c) 2018-2019 Renata Hodovan, Akos Kiss.
#
# Licensed under the BSD 3-Clause License
# <LICENSE-BSD-3-Clause.rst or https://opensource.org/licenses/BSD-3-Clause>.
# This file may not be copied, modified, or distributed except according to
# those terms.

##################
#     IoT.js     #
##################

[sut.iotjs]
# Call job settings.
call=fuzzinator.call.SubprocessCall
call.decorate(1)=fuzzinator.call.ExitCodeFilter
call.decorate(2)=fuzzinator.call.GdbBacktraceDecorator
call.decorate(3)=fuzzinator.call.RegexFilter
call.decorate(4)=fuzzinator.call.UniqueIdDecorator
call.decorate(5)=fuzzinator.call.PlatformInfoDecorator
call.decorate(6)=fuzzinator.call.SubprocessPropertyDecorator
call.decorate(7)=fuzzinator.call.SubprocessPropertyDecorator
call.decorate(8)=fuzzinator.call.AnonymizeDecorator
# Reduce job settings.
reduce=fuzzinator.reduce.Picireny
reduce_call=${call}
reduce_call.decorate(1)=${call.decorate(1)}
reduce_call.decorate(2)=${call.decorate(2)}
reduce_call.decorate(3)=${call.decorate(3)}
reduce_call.decorate(4)=${call.decorate(4)}
reduce_call.decorate(5)=${call.decorate(5)}
reduce_call.decorate(6)=${call.decorate(6)}
reduce_call.decorate(7)=${call.decorate(7)}
reduce_call.decorate(8)=${call.decorate(8)}
# Reduce job needs a FileWriterDecorator since test cases are stored as content.
reduce_call.decorate(9)=fuzzinator.call.FileWriterDecorator
reduce_cost=${sut.iotjs.reduce:jobs}
# Update job settings.
update_condition=fuzzinator.update.TimestampUpdateCondition
update=fuzzinator.update.SubprocessUpdate
validate_after_update=${iotjs:validate_after_update}
# Define issue tracker.
tracker=fuzzinator.tracker.GithubTracker
# Define issue formatters.
formatter=fuzzinator.formatter.JinjaFormatter
formatter.decorate(0)=fuzzinator.formatter.DecoderDecorator
wui_formatter=fuzzinator.formatter.JinjaFormatter
wui_formatter.decorate(0)=fuzzinator.formatter.DecoderDecorator
wui_formatter.decorate(1)=fuzzinator.formatter.MarkdownDecorator

[sut.iotjs.call]
cwd=${iotjs:root_dir}
command=${iotjs:binary} {test}
timeout=${iotjs:timeout}
no_exit_code=True
env={"ASAN_OPTIONS": "symbolize=true:allow_addr2line=true:abort_on_error=true:detect_stack_use_after_return=1:check_initialization_order=true:strict_init_order=true:exitcode=199"}

# ExitCodeFilter
# Jerry error codes and signals:
# * https://github.com/jerryscript-project/jerryscript/blob/master/jerry-core/include/jerryscript-port.h
# * http://man7.org/linux/man-pages/man7/signal.7.html
[sut.iotjs.call.decorate(1)]
exit_codes=[-11, -8, -6, 2, 120, 134, 139, 199]

# GdbBacktraceDecorator
[sut.iotjs.call.decorate(2)]
cwd=${sut.iotjs.call:cwd}
command=${sut.iotjs.call:command}

# RegexFilter
# * Jerry asserts: https://github.com/jerryscript-project/jerryscript/blob/master/jerry-core/jrt/jrt-fatals.c
# * Jerry libc assert: https://github.com/jerryscript-project/jerryscript/blob/master/jerry-libc/include/assert.h
# glibc assert: https://sourceware.org/git/?p=glibc.git;a=blob;f=assert/assert.c
# ASAN patterns: https://github.com/google/sanitizers/wiki/AddressSanitizer
# IoT.js error messages:
# * IoT.js assert: https://github.com/Samsung/iotjs/blob/master/src/iotjs_def.h
[sut.iotjs.call.decorate(3)]
stderr=["AddressSanitizer: (?P<type>SEGV|stack-overflow|heap-use-after-free|dynamic-stack-buffer-overflow|heap-buffer-overflow|stack-buffer-overflow|global-buffer-overflow|stack-use-after-return|initialization-order-fiasco|use-after-poison|use-of-uninitialized-value|stack-use-after-scope|attempting double-free) on (unknown )?address (?P<address>0x[0-9a-f]+) (.*?\n)[ ]*#[0-9]+ 0x[0-9A-Fa-f]+( in)? (?P<path>(?:(?!malloc|__libc_start_main)[^ ()])+)",
        "ICE: (?P<type>Assertion) '(?P<condition>[^']+)' failed at (?P<file>[^(]+)[(](?P<path>[^)]+)[)]:(?P<line>[0-9]+)",
        "[/](?P<file>[^/:]+):(?P<line>[0-9]+): (?P<path>[^:]+): (?P<type>Assertion) [`](?P<condition>[^']+)['] failed",
        "[/](?P<file>[^/:]+):(?P<line>[0-9]+): (?P<type>Assertion) ['](?P<condition>[^']+)['] failed",
        "ICE: (?P<type>Unreachable control path) at (?P<file>[^(]+)[(](?P<path>[^)]+)[)]:(?P<line>[0-9]+)",
        "#[0-9]+ 0x[a-fA-F0-9]+ in (?P<path>((?!memmove)[^()\n])+) [^\n/]*(?P<file>[/][^:]+):(?P<line>[0-9]+)\n"
        ]
backtrace=["\\A((?!Error: ERR_REF_COUNT_LIMIT).)*?#[0-9]+[ ]+0x[0-9a-f]+ in (?P<path>(?!__kernel_vsyscall|syscall_2|__memset_sse2_rep|raise|abort|jerry_port_fatal|jerry_fatal|jerry_assert_fail)[^ ]+) .*? at (?P<file>[^:]+):(?P<line>[0-9]+)"]

# UniqueIdDecorator
[sut.iotjs.call.decorate(4)]
properties=["type", "condition", "path"]

# SubprocessPropertyDecorator
[sut.iotjs.call.decorate(6)]
property=version
cwd=${sut.iotjs.call:cwd}
command=git rev-parse --short HEAD

# SubprocessPropertyDecorator
[sut.iotjs.call.decorate(7)]
property=build_command
command=echo "${iotjs:build}"

# AnonymizeDecorator
[sut.iotjs.call.decorate(8)]
properties=["stderr", "stdout", "backtrace"]
old_text=${sut.iotjs.call:cwd}
new_text=iotjs/


### REDUCE ###

[sut.iotjs.reduce]
hddmin=${iotjs.picireny:hddmin}
parallel=${iotjs.picireny:parallel}
combine_loops=${iotjs.picireny:combine_loops}
split_method=${iotjs.picireny:split_method}
subset_first=${iotjs.picireny:subset_first}
subset_iterator=${iotjs.picireny:subset_iterator}
complement_iterator=${iotjs.picireny:complement_iterator}
jobs=${iotjs.picireny:jobs}
max_utilization=${iotjs.picireny:max_utilization}
encoding=${iotjs.picireny:encoding}
antlr=${iotjs.picireny:antlr}
format=${iotjs.picireny:format}
grammar=${iotjs.picireny:grammar}
start=${iotjs.picireny:start}
replacements=${iotjs.picireny:replacements}
lang=${iotjs.picireny:lang}
hdd_star=${iotjs.picireny:hdd_star}
flatten_recursion=${iotjs.picireny:flatten_recursion}
squeeze_tree=${iotjs.picireny:squeeze_tree}
skip_unremovable=${iotjs.picireny:skip_unremovable}
skip_whitespace=${iotjs.picireny:skip_whitespace}
build_hidden_tokens=${iotjs.picireny:build_hidden_tokens}
granularity=${iotjs.picireny:granularity}
cache_class=${iotjs.picireny:cache_class}
cleanup=${iotjs.picireny:cleanup}

[sut.iotjs.reduce_call]
cwd=${sut.iotjs.call:cwd}
command=${sut.iotjs.call:command}
timeout=${sut.iotjs.call:timeout}
no_exit_code=${sut.iotjs.call:no_exit_code}
env=${sut.iotjs.call:env}

# ExitCodeFilter
[sut.iotjs.reduce_call.decorate(1)]
exit_codes=${sut.iotjs.call.decorate(1):exit_codes}

# GdbBacktraceDecorator
[sut.iotjs.reduce_call.decorate(2)]
cwd=${sut.iotjs.call.decorate(2):cwd}
command=${sut.iotjs.call.decorate(2):command}

# RegexFilter
[sut.iotjs.reduce_call.decorate(3)]
stderr=${sut.iotjs.call.decorate(3):stderr}
backtrace=${sut.iotjs.call.decorate(3):backtrace}

# UniqueIdDecorator
[sut.iotjs.reduce_call.decorate(4)]
properties=${sut.iotjs.call.decorate(4):properties}

# SubprocessPropertyDecorator
[sut.iotjs.reduce_call.decorate(6)]
property=${sut.iotjs.call.decorate(6):property}
cwd=${sut.iotjs.call.decorate(6):cwd}
command=${sut.iotjs.call.decorate(6):command}

# SubprocessPropertyDecorator
[sut.iotjs.reduce_call.decorate(7)]
property=${sut.iotjs.call.decorate(7):property}
command=${sut.iotjs.call.decorate(7):command}

# AnonymizeDecorator
[sut.iotjs.reduce_call.decorate(8)]
properties=${sut.iotjs.call.decorate(8):properties}
old_text=${sut.iotjs.call.decorate(8):old_text}
new_text=${sut.iotjs.call.decorate(8):new_text}

# FileWriterDecorator
[sut.iotjs.reduce_call.decorate(9)]
filename=${fuzzinator:work_dir}/iotjs/picireny/{uid}.js


### UPDATE ###

[sut.iotjs.update_condition]
age=${iotjs:age}
path=${sut.iotjs.call:cwd}/${iotjs:binary}

[sut.iotjs.update]
cwd=${sut.iotjs.call:cwd}
command=${fuzzinator.custom:config_root}/iotjs/iotjs-update.sh "${iotjs:build}"
env=${iotjs:build_env}


### REPORT ###

[sut.iotjs.tracker.init]
repository=jerryscript-project/iotjs


### FORMATTER ###

[sut.iotjs.formatter.init]
short={{type}} {{condition}} in {{path}}
long_file=${fuzzinator.custom:config_root}/iotjs/iotjs-report.md

[sut.iotjs.wui_formatter.init]
short=${sut.iotjs.formatter.init:short}
long_file=${sut.iotjs.formatter.init:long_file}

[sut.iotjs.wui_formatter.decorate(1)]
extensions=["extra", "codehilite", "fenced_code"]
