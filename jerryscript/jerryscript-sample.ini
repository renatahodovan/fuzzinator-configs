# Copyright (c) 2018-2019 Renata Hodovan, Akos Kiss.
#
# Licensed under the BSD 3-Clause License
# <LICENSE-BSD-3-Clause.rst or https://opensource.org/licenses/BSD-3-Clause>.
# This file may not be copied, modified, or distributed except according to
# those terms.

[jerryscript]
# Path to JerryScript root directory. Must be set.
root_dir=
binary=build/bin/jerry
# Cost of reduction which is equal to its parallelization level.
# (Optional, default: 1)
reduce_jobs=
# datetime in [days:][hours:][minutes:]seconds format.
age=1:0:0:0
validate_after_update=True
# Timeout in seconds of running a single test.
# (Optional, default: 1)
timeout=1
# Choose a command/env pair from below or define a new one here.
build=${jerryscript.build.debug_gcc_asan_es2015:command}
build_env=${jerryscript.build.debug_gcc_asan_es2015:env}

[jerryscript.build.release]
command=./tools/build.py --clean
env={}

[jerryscript.build.debug]
command=./tools/build.py --clean --debug
env={}

[jerryscript.build.es2015_debug]
command=./tools/build.py --clean --debug --compile-flag=-m32
        --profile=es2015-subset --system-allocator=on
        --error-messages=on --logging=on
env={}

[jerryscript.build.debug_clang_asan]
command=./tools/build.py --clean --debug --compile-flag=-fsanitize=address
        --compile-flag=-m32 --compile-flag=-fno-omit-frame-pointer
        --compile-flag=-fno-common --compile-flag=-g
        --strip=off --system-allocator=on --logging=on
        --linker-flag=-fuse-ld=gold --error-messages=on --lto=off
env={"CC": "clang"}

[jerryscript.build.debug_clang_asan_es2015]
command=./tools/build.py --clean --debug --compile-flag=-fsanitize=address
        --compile-flag=-m32 --compile-flag=-fno-omit-frame-pointer
        --compile-flag=-fno-common --compile-flag=-g
        --strip=off --system-allocator=on
        --linker-flag=-fuse-ld=gold --error-messages=on --lto=off
        --profile=es2015-subset --logging=on
env={"CC": "clang"}

[jerryscript.build.debug_gcc_asan]
command=./tools/build.py --clean --debug --compile-flag=-fsanitize=address
        --compile-flag=-m32 --compile-flag=-fno-omit-frame-pointer
        --compile-flag=-fno-common --compile-flag=-g
        --strip=off --system-allocator=on
        --linker-flag=-fuse-ld=gold --error-messages=on --logging=on
env={}

[jerryscript.build.debug_gcc_asan_es2015]
command=./tools/build.py --clean --debug --compile-flag=-fsanitize=address
        --compile-flag=-m32 --compile-flag=-fno-omit-frame-pointer
        --compile-flag=-fno-common --compile-flag=-g
        --strip=off --system-allocator=on --logging=on
        --linker-flag=-fuse-ld=gold --error-messages=on --profile=es2015-subset
env={}

[jerryscript.picireny]
hddmin=full
parallel=True
combine_loops=False
split_method=zeller
subset_first=True
subset_iterator=skip
complement_iterator=backward
jobs=8
max_utilization=100
encoding=
antlr=
format=
grammar=["${fuzzinator.custom:config_root}/jerryscript/ECMAScript.g4"]
start=program
replacements=
lang=java
hdd_star=True
flatten_recursion=True
squeeze_tree=True
skip_unremovable=True
skip_whitespace=True
build_hidden_tokens=True
granularity=inf
cache_class=ContentCache
cleanup=True

[jerryscript.listdir]
# Bash-like file path. Must be set for directory fuzzing.
pattern=

[jerryscript.random]
batch=1000
min_length=100
max_length=1000

[jerryscript.grammarinator]
batch=1000
# Path to ECMAScriptUnlexer.py. Must be set to use the generate test cases
# from scratch or mutate existing ones.
unlexer=
# Path to ECMAScriptUnparser.py. Must be set to use the generate test cases
# from scratch or mutate existing ones.
unparser=
rule=program
# Set --tree-transformer to modify ASTs that will be saved to the population.
# Set --test-transformer to serialize the executed test cases
# (the modified AST won't be saved to the population).
transformers=
# Operator options: --no-generate, --no-mutate, --no-recombine
operators=
# If the mutate or recombine operators are enabled then population must point
# to an existing directory containing ASTs.
population=
max_depth=30
cooldown=0.9
jobs=8
encoding=utf-8
log_level=INFO
n=${batch}
