# Copyright (c) 2019-2021 Renata Hodovan, Akos Kiss.
#
# Licensed under the BSD 3-Clause License
# <LICENSE-BSD-3-Clause.rst or https://opensource.org/licenses/BSD-3-Clause>.
# This file may not be copied, modified, or distributed except according to
# those terms.

###################
#     Duktape     #
###################

[sut.duktape]
# Call job settings.
call=fuzzinator.call.SubprocessCall
call.decorate(1)=fuzzinator.call.ExitCodeFilter
call.decorate(2)=fuzzinator.call.GdbBacktraceDecorator
call.decorate(3)=fuzzinator.call.SanitizerAutomatonFilter
call.decorate(4)=fuzzinator.call.SanitizerAnalyzerDecorator
call.decorate(5)=fuzzinator.call.UniqueIdDecorator
call.decorate(6)=fuzzinator.call.PlatformInfoDecorator
call.decorate(7)=fuzzinator.call.SubprocessPropertyDecorator
call.decorate(8)=fuzzinator.call.SubprocessPropertyDecorator
call.decorate(9)=fuzzinator.call.SubprocessPropertyDecorator
call.decorate(10)=fuzzinator.call.AnonymizeDecorator
# Reduce job settings.
reduce=fuzzinator.reduce.Picireny
reduce_call=${call}
reduce_call.decorate(1)=${call.decorate(1)}
reduce_call.decorate(2)=${call.decorate(2)}
reduce_call.decorate(3)=${call.decorate(3)}
reduce_call.decorate(4)=${call.decorate(4)}
reduce_call.decorate(5)=${call.decorate(5)}
reduce_call.decorate(6)=${call.decorate(6)}
reduce_call.decorate(7)=${call.decorate(7)}
reduce_call.decorate(8)=${call.decorate(8)}
reduce_call.decorate(9)=${call.decorate(9)}
reduce_call.decorate(10)=${call.decorate(10)}
# Reduce job needs a FileWriterDecorator since test cases are stored as content.
reduce_call.decorate(11)=fuzzinator.call.FileWriterDecorator
reduce_cost=${sut.duktape.reduce:jobs}
# Update job settings.
update_condition=fuzzinator.update.TimestampUpdateCondition
update=fuzzinator.update.SubprocessUpdate
validate_after_update=${duktape:validate_after_update}
# Define issue tracker.
report=fuzzinator.tracker.GithubTracker
# Define issue formatters.
formatter=fuzzinator.formatter.JinjaFormatter
formatter.decorate(0)=fuzzinator.formatter.DecoderDecorator
wui_formatter=fuzzinator.formatter.JinjaFormatter
wui_formatter.decorate(0)=fuzzinator.formatter.DecoderDecorator
wui_formatter.decorate(1)=fuzzinator.formatter.MarkdownDecorator
# Define custom issue exporter.
exporter=fuzzinator.exporter.TestExporter

[sut.duktape.call]
cwd=${duktape:root_dir}
command=./${duktape:binary} {test}
timeout=${duktape:timeout}
env={"ASAN_OPTIONS": "handle_abort=1:symbolize=true:allow_addr2line=true:abort_on_error=true:detect_stack_use_after_return=1:check_initialization_order=true:strict_init_order=true:exitcode=199"}

# ExitCodeFilter
# * http://man7.org/linux/man-pages/man7/signal.7.html
# * Looking for SIGSEGV, SIGFPE, SIGABRT, SIGILL
[sut.duktape.call.decorate(1)]
exit_codes=[-11, -8, -6, -4, 132, 134, 136, 139, 199]

# GdbBacktraceDecorator
[sut.duktape.call.decorate(2)]
cwd=${sut.duktape.call:cwd}
command=${sut.duktape.call:command}

# SanitizerAutomatonFilter
# glibc assert: https://sourceware.org/git/?p=glibc.git;a=blob;f=assert/assert.c
[sut.duktape.call.decorate(3)]
stderr=["mns /duk_default_fatal_handler|__GI_\\w+/",
        "mss /[*][*][*] FATAL ERROR: (?P<error_type>assertion failed): (?P<condition>.*?) [(](?P<file>[^:]+):(?P<line>[0-9]+)[)]/"]
backtrace=["mns /duk_default_fatal_handler|__GI_\\w+/",
           "mas /#[0-9]+[ ]+0x[0-9a-f]+ in (?P<function>[^\\s]+) .*? at (?P<file>[^:]+):(?P<line>[0-9]+)/"]

# UniqueIdDecorator
[sut.duktape.call.decorate(5)]
properties=["error_type", "condition", "function"]

# SubprocessPropertyDecorator
[sut.duktape.call.decorate(7)]
property=version
cwd=${sut.duktape.call:cwd}
command=git rev-parse --short HEAD

# SubprocessPropertyDecorator
[sut.duktape.call.decorate(8)]
property=build_config
command=cat ${fuzzinator.custom:config_root}/sut/duktape/duktape-fuzzinator-options.yaml

# SubprocessPropertyDecorator
[sut.duktape.call.decorate(9)]
property=build_command
command=cat ${fuzzinator.custom:config_root}/sut/duktape/duktape-update.sh

# AnonymizeDecorator
[sut.duktape.call.decorate(10)]
properties=["stderr", "stdout", "backtrace"]
old_text=${sut.duktape.call:cwd}
new_text=duktape/


### REDUCE ###

[sut.duktape.reduce]
hddmin=${duktape.picireny:hddmin}
parallel=${duktape.picireny:parallel}
combine_loops=${duktape.picireny:combine_loops}
split_method=${duktape.picireny:split_method}
subset_first=${duktape.picireny:subset_first}
subset_iterator=${duktape.picireny:subset_iterator}
complement_iterator=${duktape.picireny:complement_iterator}
jobs=${duktape.picireny:jobs}
max_utilization=${duktape.picireny:max_utilization}
encoding=${duktape.picireny:encoding}
antlr=${duktape.picireny:antlr}
grammar=${duktape.picireny:grammar}
start=${duktape.picireny:start}
lang=${duktape.picireny:lang}
hdd_star=${duktape.picireny:hdd_star}
flatten_recursion=${duktape.picireny:flatten_recursion}
squeeze_tree=${duktape.picireny:squeeze_tree}
skip_unremovable=${duktape.picireny:skip_unremovable}
skip_whitespace=${duktape.picireny:skip_whitespace}
build_hidden_tokens=${duktape.picireny:build_hidden_tokens}
granularity=${duktape.picireny:granularity}
cache_class=${duktape.picireny:cache_class}
cleanup=${duktape.picireny:cleanup}

[sut.duktape.reduce_call]
cwd=${sut.duktape.call:cwd}
command=${sut.duktape.call:command}
timeout=${sut.duktape.call:timeout}

# ExitCodeFilter
[sut.duktape.reduce_call.decorate(1)]
exit_codes=${sut.duktape.call.decorate(1):exit_codes}

# GdbBacktraceDecorator
[sut.duktape.reduce_call.decorate(2)]
cwd=${sut.duktape.call.decorate(2):cwd}
command=${sut.duktape.call.decorate(2):command}

# SanitizerAutomatonFilter
[sut.duktape.reduce_call.decorate(3)]
stderr=${sut.duktape.call.decorate(3):stderr}
backtrace=${sut.duktape.call.decorate(3):backtrace}

# UniqueIdDecorator
[sut.duktape.reduce_call.decorate(5)]
properties=${sut.duktape.call.decorate(5):properties}

# SubprocessPropertyDecorator
[sut.duktape.reduce_call.decorate(7)]
property=${sut.duktape.call.decorate(7):property}
cwd=${sut.duktape.call.decorate(7):cwd}
command=${sut.duktape.call.decorate(7):command}

# SubprocessPropertyDecorator
[sut.duktape.reduce_call.decorate(8)]
property=${sut.duktape.call.decorate(8):property}
command=${sut.duktape.call.decorate(8):command}

# SubprocessPropertyDecorator
[sut.duktape.reduce_call.decorate(9)]
property=${sut.duktape.call.decorate(9):property}
command=${sut.duktape.call.decorate(9):command}

# AnonymizeDecorator
[sut.duktape.reduce_call.decorate(10)]
properties=${sut.duktape.call.decorate(10):properties}
old_text=${sut.duktape.call.decorate(10):old_text}
new_text=${sut.duktape.call.decorate(10):new_text}

# FileWriterDecorator
[sut.duktape.reduce_call.decorate(11)]
filename=${fuzzinator:work_dir}/duktape/picireny/{uid}.js


### UPDATE ###

[sut.duktape.update_condition]
age=${duktape:age}
path=${duktape:root_dir}/${duktape:binary}

[sut.duktape.update]
cwd=${sut.duktape.call:cwd}
command=${fuzzinator.custom:config_root}/sut/duktape/duktape-update.sh


### REPORT ###

[sut.duktape.tracker]
repository=svaarala/duktape
token=${duktape:token}


### FORMATTER ###

[sut.duktape.formatter]
short={{type}} {{condition}} in {{function}}
long_file=${fuzzinator.custom:config_root}/sut/duktape/duktape-report.md

[sut.duktape.wui_formatter]
short=${sut.duktape.formatter:short}
long_file=${sut.duktape.formatter:long_file}

[sut.duktape.wui_formatter.decorate(1)]
extensions=["extra", "codehilite", "fenced_code"]


### EXPORTER ###

[sut.duktape.exporter]
extension=.js
type=text/javascript
