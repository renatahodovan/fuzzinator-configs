# Copyright (c) 2019 Renata Hodovan, Akos Kiss.
#
# Licensed under the BSD 3-Clause License
# <LICENSE-BSD-3-Clause.rst or https://opensource.org/licenses/BSD-3-Clause>.
# This file may not be copied, modified, or distributed except according to
# those terms.

[v8]
# Path to v8 root directory. Must be set.
root_dir=
binary=out/fuzz/d8
# Cost of reduction which is equal to its parallelization level.
# (Optional, default: 1)
reduce_jobs=
# datetime in [days:][hours:][minutes:]seconds format.
age=1:0:0:0
validate_after_update=True
# Timeout in seconds of running a single test.
# (Optional, default: 1)
timeout=1
# Choose a command/env pair from below or define a new one here.
build=${v8.build.asan_debug:command}
build_env=${v8.build.asan_debug:env}

[v8.build.release]
command=gn gen out/fuzz --args="is_debug=false dcheck_always_on=true dcheck_is_configurable=true v8_enable_slow_dchecks=true v8_enable_v8_checks=true" && ninja -C out/fuzz
env={}

[v8.build.debug]
command=gn gen out/fuzz --args="is_debug=true dcheck_always_on=true dcheck_is_configurable=true v8_enable_slow_dchecks=true v8_enable_v8_checks=true" && ninja -C out/fuzz
env={}

[v8.build.asan_release]
command=gn gen out/fuzz --args="is_debug=false is_asan=true dcheck_always_on=true dcheck_is_configurable=true v8_enable_slow_dchecks=true v8_enable_v8_checks=true is_clang=true" && ninja -C out/fuzz
env={}

[v8.build.asan_debug]
command=gn gen out/fuzz --args="is_debug=true is_asan=true dcheck_always_on=true dcheck_is_configurable=true v8_enable_slow_dchecks=true v8_enable_v8_checks=true is_clang=true" && ninja -C out/fuzz
env={}

[v8.picireny]
hddmin=full
parallel=True
combine_loops=False
split_method=zeller
subset_first=True
subset_iterator=skip
complement_iterator=backward
jobs=8
max_utilization=100
encoding=
antlr=
format=
grammar=["${fuzzinator.custom:config_root}/v8/ECMAScript.g4"]
start=program
replacements=
lang=java
hdd_star=True
flatten_recursion=True
squeeze_tree=True
skip_unremovable=True
skip_whitespace=True
build_hidden_tokens=True
granularity=inf
cache_class=ContentCache
cleanup=True

[v8.listdir]
# Bash-like file path. Must be set for directory fuzzing.
pattern=

[v8.random]
batch=1000
min_length=100
max_length=1000

[v8.grammarinator]
batch=1000
# Path to ECMAScriptUnlexer.py. Must be set to use the generate test cases
# from scratch or mutate existing ones.
unlexer=
# Path to ECMAScriptUnparser.py. Must be set to use the generate test cases
# from scratch or mutate existing ones.
unparser=
rule=program
# Set --tree-transformer to modify ASTs that will be saved to the population.
# Set --test-transformer to serialize the executed test cases
# (the modified AST won't be saved to the population).
transformers=
# Operator options: --no-generate, --no-mutate, --no-recombine
operators=
# If the mutate or recombine operators are enabled then population must point
# to an existing directory containing ASTs.
population=
max_depth=30
cooldown=0.9
jobs=8
encoding=utf-8
log_level=INFO
n=${batch}
cwd=
env=
